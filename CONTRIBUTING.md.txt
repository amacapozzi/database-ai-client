# Contributing to Database AI Client

First off, thank you for considering contributing to Database AI Client! It's people like you that make this tool amazing.

## 🎯 How Can I Contribute?

### Reporting Bugs

Before creating bug reports, please check the existing issues to avoid duplicates. When you create a bug report, please include as many details as possible:

- **Use a clear and descriptive title**
- **Describe the exact steps to reproduce the problem**
- **Provide specific examples** with sample databases or queries
- **Describe the behavior you observed** and what you expected
- **Include screenshots** if helpful
- **Specify your environment**: OS, Go version, Wails version

### Suggesting Features

Feature suggestions are welcome! Please:

- **Use a clear and descriptive title**
- **Provide a detailed description** of the suggested feature
- **Explain why this feature would be useful** to most users
- **Consider the scope** - is this something that fits the project's goals?

### Pull Requests

1. **Fork the repo** and create your branch from `main`
2. **If you've added code** that should be tested, add tests
3. **Ensure the test suite passes** with `go test ./...`
4. **Make sure your code follows** the existing style
5. **Write a descriptive commit message**
6. **Update documentation** if needed

## 🏗️ Development Setup

### Prerequisites

- Go 1.21 or higher
- Node.js 18 or higher
- Wails CLI v2.10+

### Setting Up Your Development Environment

```bash
# 1. Fork and clone the repo
git clone https://github.com/yourusername/database-ai-client.git
cd database-ai-client

# 2. Install Wails CLI (if not already installed)
go install github.com/wailsapp/wails/v2/cmd/wails@latest

# 3. Run in development mode
wails dev
```

### Project Structure

```
database-ai-client/
├── frontend/                   # React frontend
│   ├── src/components/        # Reusable components
│   ├── src/pages/            # Application pages
│   └── src/services/         # API calls to Go backend
├── internal/                  # Go backend (private package)
│   ├── database/             # Database drivers & queries
│   ├── ai/                   # AI service integration
│   └── models/               # Data models
├── app.go                    # Wails app context & methods
└── main.go                   # Entry point
```

### Coding Standards

#### Go Code

- Follow [Go Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments)
- Use `gofmt` to format your code
- Run `go vet` to check for common mistakes
- Write meaningful variable and function names
- Add comments for exported functions and complex logic

#### Frontend Code

- Use TypeScript where possible
- Follow React best practices and hooks
- Use Tailwind CSS for styling (avoid custom CSS when possible)
- Use meaningful component names
- Keep components focused and reusable

#### Commit Messages

Use conventional commits:

```
feat: add support for MongoDB connections
fix: resolve connection timeout issues
docs: update API documentation
style: fix code formatting
refactor: simplify database query logic
test: add unit tests for AI service
chore: update dependencies
```

## 🧪 Testing

### Running Tests

```bash
# Run Go tests
go test ./...

# Run with coverage
go test -cover ./...

# Run frontend tests
cd frontend
npm test
```

### Writing Tests

- Write unit tests for new functionality
- Test both success and error cases
- Mock external dependencies (databases, AI APIs)
- Keep tests simple and focused

### Database Testing

For database-related features:

- Use SQLite in-memory databases for tests
- Create test fixtures with sample data
- Clean up connections after tests
- Test with different database types when possible

## 🎨 UI/UX Guidelines

### Design Principles

- **Simplicity**: Keep interfaces clean and intuitive
- **Consistency**: Follow existing patterns and components
- **Accessibility**: Ensure keyboard navigation and screen reader support
- **Performance**: Optimize for large datasets and slow connections

### Color Scheme

We use a modern, neutral color palette:
- Primary: Dark grays and blacks
- Accent: Subtle blues for interactive elements
- Success: Green for positive actions
- Warning: Yellow/orange for cautions
- Error: Red for errors

## 🔧 Adding New Database Drivers

To add support for a new database:

1. **Create driver file** in `internal/database/drivers/`
2. **Implement the DatabaseDriver interface**:
   ```go
   type DatabaseDriver interface {
       Connect(connectionString string) error
       GetTables() ([]Table, error)
       ExecuteQuery(query string) ([]Row, error)
       Close() error
   }
   ```
3. **Register the driver** in `internal/database/connection.go`
4. **Add connection string validation**
5. **Write tests** with a test database
6. **Update documentation** with connection examples

## 🤖 AI Integration Guidelines

### Adding New AI Providers

1. **Create provider file** in `internal/ai/providers/`
2. **Implement the AIProvider interface**:
   ```go
   type AIProvider interface {
       Analyze(query string, data interface{}) (*AIResponse, error)
       GenerateSQL(description string, schema Schema) (string, error)
   }
   ```
3. **Handle rate limiting and errors gracefully**
4. **Add configuration options**
5. **Test with mock responses**

### AI Response Guidelines

- **Be helpful**: Provide actionable insights
- **Be accurate**: Don't make assumptions about data
- **Be safe**: Validate generated SQL queries
- **Be transparent**: Indicate confidence levels

## 📖 Documentation

### Code Documentation

- Comment all exported functions and types
- Use Go doc conventions
- Include examples for complex functions
- Keep comments up to date with code changes

### User Documentation

- Update README.md for new features
- Add usage examples
- Include screenshots for UI changes
- Update the roadmap section

## 🚀 Release Process

1. **Version bump** in appropriate files
2. **Update CHANGELOG.md** with new features and fixes
3. **Tag the release** with `git tag v1.x.x`
4. **Build binaries** for all supported platforms
5. **Create GitHub release** with binaries and changelog

## ❓ Questions?

Don't hesitate to ask questions! You can:

- Open an issue with the `question` label
- Start a discussion in the repository
- Reach out to the maintainers directly

## 🙏 Recognition

Contributors will be:

- Added to the README.md contributors section
- Mentioned in release notes for significant contributions
- Given credit in commit messages and pull requests

Thank you for contributing to Database AI Client! 🚀